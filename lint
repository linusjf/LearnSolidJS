#!/usr/bin/env bash
#shellcheck disable=SC1091
source ./require.sh
source ./errorhandlers.sh
source ./colors.sh
require date htmlhint sed stylelint prettier tidy find parallel colorguard html-validate js-beautify nproc mdl mdformat eslint shfmt grep
start=$(date +%s)
echo -e "${GREEN}Starting...${ENDCOLOR}"
declare -i SUCCESS=0
declare -r configFileName="tidy.config"
declare -i PROCS=$(($(nproc) - 1))

process_yaml() {
  files=$(find . \( -path "**/.git/**" -o -path "**/node_modules/**" -o -path "**/build/**" -o -path "**/dist/**" \) -prune \
    -o -type f -name "*.yaml" -print)
  if test -n "$files"; then
    echo -e "${GREEN}Executing prettier for yaml...${ENDCOLOR}"
    echo "$files" |
      parallel -X --bar -j "$PROCS" -I% \
        prettier --log-level silent --cache --parser yaml --write %
    return $?
  fi
  return 0
}

process_json() {
  files=$(find . \( -path "**/.git/**" -o -path "**/node_modules/**" -o -path "**/build/**" -o -path "**/dist/**" \) -prune \
    -o -type f -name "*.json" -print)
  if test -n "$files"; then
    echo -e "${GREEN}Executing prettier for json...${ENDCOLOR}"
    echo "$files" |
      parallel -X --bar -j "$PROCS" -I% \
        prettier --log-level silent --cache --parser json --write %
    return $?
  fi
  return 0
}

process_stylesheets() {
  declare -i retcode=0
  files=$(find . \( -path "**/.git/**" -o -path "**/node_modules/**" -o -path "**/build/**" -o -path "**/dist/**" \) -prune \
    -o -type f \( -name "*.css" -a ! -name "*.scss.css" -a ! -name "*.sass.css" \) -print)
  if test -n "$files"; then
    echo -e "${GREEN}Executing colorguard...${ENDCOLOR}"
    echo "$files" |
      parallel -X --bar -j "$PROCS" -I% \
        colorguard --file % --allow-equivalent-notation
    retcode=$((retcode + $?))
    echo -e "${GREEN}Executing prettier for css...${ENDCOLOR}"
    echo "$files" |
      parallel -X --bar -j "$PROCS" -I% \
        prettier --log-level silent --cache --parser css --write %
    retcode=$((retcode + $?))
  fi
  files=$(find . \( -path "**/.git/**" -o -path "**/node_modules/**" -o -path "**/build/**" -o -path "**/dist/**" \) -prune \
    -o -type f \( -name "*.css" -a ! -name "*.scss.css" -a ! -name "*.sass.css" -a ! -name "tw-*.css" \) -print)
  if test -n "$files"; then
    echo -e "${GREEN}Executing stylelint for css...${ENDCOLOR}"
    echo "$files" |
      parallel -X --bar -j "$PROCS" -I% \
        stylelint % --color --fix --quiet-deprecation-warnings
    retcode=$((retcode + $?))
  fi
  files=$(find . \( -path "**/.git/**" -o -path "**/node_modules/**" -o -path "**/dist/**" -o -path "**/build/**" \) -prune \
    -o -type f -name "*.scss" -print)
  if test -n "$files"; then
    echo -e "${GREEN}Executing prettier for scss...${ENDCOLOR}"
    echo "$files" |
      parallel -X --bar -j "$PROCS" -I% \
        prettier --log-level silent --cache --parser scss --write %
    retcode=$((retcode + $?))
    echo -e "${GREEN}Executing stylelint for scss...${ENDCOLOR}"
    echo "$files" |
      parallel -X --bar -j "$PROCS" -I% \
        stylelint % --color --fix --quiet-deprecation-warnings
    retcode=$((retcode + $?))
  fi
  files=$(find . \( -path "**/.git/**" -o -path "**/node_modules/**" -o -path "**/build/**" -o -path "**/dist/**" \) -prune \
    -o -type f \( -name "*.scss" -a ! -name "_*.scss" \) -print)
  if test -n "$files"; then
    echo -e "${GREEN}Executing sass for scss...${ENDCOLOR}"
    echo "$files" |
      parallel -X --bar -j "$PROCS" -I@ \
        ./runsass @
    retcode=$((retcode + $?))
  fi
  files=$(find . \( -path "**/.git/**" -o -path "**/node_modules/**" -o -path "**/build/**" -o -path "**/dist/**" \) -prune \
    -o -type f -name "*.sass" -print)
  if test -n "$files"; then
    echo -e "${GREEN}Executing sass for sass...${ENDCOLOR}"
    echo "$files" |
      parallel -X --bar -j "$PROCS" -I% \
        ./runsass %
    retcode=$((retcode + $?))
  fi
  return "$retcode"
}

process_html() {
  declare -i retcode=0
  files=$(find . \( -path "**/.git/**" -o -path "**/dist/**" -o -path "**/node_modules/**" -o -path "**/build/**" \) -prune \
    -o -type f -name "*.html" -print)
  if test -n "$files"; then
    echo -e "${GREEN}Executing tidy...${ENDCOLOR}"
    echo -e "${GREEN}Warnings and errors written to tidy.out.${ENDCOLOR}"
    ./wraptidy -config "$configFileName" -quiet -modify -- **/*.html
    retcode=$((retcode + $?))
    sed -i "/^Tidy.*$/d" tidy.out
    echo -e "${GREEN}Executing prettier for html...${ENDCOLOR}"
    echo "$files" |
      parallel -X --bar -j "$PROCS" -I% \
        prettier --log-level silent --cache --parser html --write %
    retcode=$((retcode + $?))
    echo -e "${GREEN}Executing htmlhint...${ENDCOLOR}"
    echo "$files" |
      parallel -X --bar -j "$PROCS" -I% \
        htmlhint --config .htmlhintrc -f compact % 2>/dev/null
    retcode=$((retcode + $?))
    echo -e "${GREEN}Executing html-validate...${ENDCOLOR}"
    echo "$files" |
      parallel -X --bar -j "$PROCS" -I% \
        html-validate --formatter stylish %
    retcode=$((retcode + $?))
  fi
  return "$retcode"
}

process_js() {
  files=$(find . \( -path "**/.git/**" -o -path "**/node_modules/**" -o -path "**/build/**" -o -path "**/dist/**" \) -prune \
    -o -type f \( -name "*.js" -o -name "*.mjs" -o -name "*.cjs" \) -print)
  if test -n "$files"; then
    echo -e "${GREEN}Executing js-beautify for javascript files...${ENDCOLOR}"
    echo "$files" |
      parallel -X --bar -j "$PROCS" -I% \
        js-beautify --type js --quiet -r %
    return $?
  fi
  return 0
}

process_svg() {
  files=$(find . \( -path "**/.git/**" -o -path "**/node_modules/**" -o -path "**/build/**" -o -path "**/dist/**" \) -prune \
    -o -type f -name "*.svg" -print)
  if test -n "$files"; then
    echo -e "${GREEN}Executing prettier for svg...${ENDCOLOR}"
    echo "$files" |
      parallel -X --bar -j "$PROCS" -I% \
        prettier --log-level silent --cache --parser html --write %
    return $?
  fi
  return 0
}

process_yaml
SUCCESS=$((SUCCESS + $?))

process_json
SUCCESS=$((SUCCESS + $?))

process_stylesheets
SUCCESS=$((SUCCESS + $?))

process_html
SUCCESS=$((SUCCESS + $?))

process_js
SUCCESS=$((SUCCESS + $?))

process_svg
SUCCESS=$((SUCCESS + $?))

files=$(find . \( -path "**/.git/**" -o -path "**/node_modules/**" -o -path "**/build/**" -o -path "**/dist/**" \) -prune \
  -o -type f -name "*.jsx" -print)
if test -n "$files"; then
  echo -e "${GREEN}Executing prettier for jsx...${ENDCOLOR}"
  echo "$files" |
    parallel -X --bar -j "$PROCS" -I% \
      prettier --log-level silent --cache --parser babel --write %
  SUCCESS=$((SUCCESS + $?))
fi

files=$(find . \( -path "**/.git/**" -o -path "**/node_modules/**" -o -path "**/build/**" -o -path "**/dist/**" \) -prune \
  -o -type f -name "*.tsx" -print)
if test -n "$files"; then
  echo -e "${GREEN}Executing prettier for tsx files...${ENDCOLOR}"
  echo "$files" |
    parallel -X --bar -j "$PROCS" -I% \
      prettier --log-level silent --cache --parser babel-ts --write %
  SUCCESS=$((SUCCESS + $?))
fi

files=$(find . \( -path "**/.git/**" -o -path "**/node_modules/**" -o -path "**/build/**" -o -path "**/dist/**" \) -prune \
  -o -type f -name "*.ts" -print)
if test -n "$files"; then
  echo -e "${GREEN}Executing prettier for ts files...${ENDCOLOR}"
  echo "$files" |
    parallel -X --bar -j "$PROCS" -I% \
      prettier --log-level silent --cache --parser typescript --write %
  SUCCESS=$((SUCCESS + $?))
fi

files=$(find . \( -path "**/.git/**" -o -path "**/node_modules/**" -o -path "**/dist/**" -o -path "**/build/**" \) -prune \
  -o -type f -name "*.md" -print)
if test -n "$files"; then
  echo -e "${GREEN}Executing mdformat for md...${ENDCOLOR}"
  echo "$files" |
    parallel -X --bar -j "$PROCS" -I% \
      mdformat -- %
  SUCCESS=$((SUCCESS + $?))
  echo -e "${GREEN}Executing mdl for md...${ENDCOLOR}"
  echo "$files" |
    parallel -X --bar -j "$PROCS" -I% \
      mdl -- %
  SUCCESS=$((SUCCESS + $?))
fi

echo -e "${GREEN}Executing shfmt for shell scripts...${ENDCOLOR}"
shfmt -f . | grep -v 'node_modules' |
  parallel -X --bar -j "$PROCS" -I% \
    shfmt -i 2 -bn -ci -sr -kp -w -- %
SUCCESS=$((SUCCESS + $?))

echo -e "${GREEN}Executing eslint...${ENDCOLOR}"
eslint --fix --color -- .
SUCCESS=$((SUCCESS + $?))

end=$(date +%s)
echo -e "${GREEN}Execution time: $((end - start)) seconds.${ENDCOLOR}"

exit "$SUCCESS"
